scriptencoding utf8

function! LightlineReadonly()
  return "%{(&readonly || !&modifiable) ? '⭤' : ''}"
endfunction

function! LightlineFugitive()
  let branch = fugitive#head()
  return branch !=# '' ? '⭠ ' . branch : ''
endfunction

let g:lightline = {}

let g:lightline.colorscheme = 'powerline'

let g:lightline.active = {}
let g:lightline.active.left = [
      \  ['mode', 'paste'],
      \  ['git'],
      \  ['ro', 'filename', 'modified'],
      \]
let g:lightline.active.right = [
      \ ['lineinfo'],
      \ ['char_hex'],
      \ ['fileformat', 'fileencoding', 'filetype'],
      \ ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
      \]

let g:lightline.component = {}
let g:lightline.component.char_hex = '0x%02B'

let g:lightline.component_expand = {}
let g:lightline.component_expand.linter_checking = 'lightline#ale#checking'
let g:lightline.component_expand.linter_warnings = 'lightline#ale#warnings'
let g:lightline.component_expand.linter_errors   = 'lightline#ale#errors'
let g:lightline.component_expand.linter_ok       = 'lightline#ale#ok'
let g:lightline.component_expand.ro  = 'LightlineReadonly'

let g:lightline.component_function = {}
let g:lightline.component_function.git = 'LightlineFugitive'

let g:lightline.component_type = {}
let g:lightline.component_type.linter_checking = 'left'
let g:lightline.component_type.linter_warnings = 'warning'
let g:lightline.component_type.linter_errors   = 'error'
let g:lightline.component_type.linter_ok       = 'left'
let g:lightline.component_type.ro       = 'error'

let g:lightline#ale#indicator_checking = '...'
let g:lightline#ale#indicator_warnings = '◆'
let g:lightline#ale#indicator_errors = '✗'
let g:lightline#ale#indicator_ok = '✓'
