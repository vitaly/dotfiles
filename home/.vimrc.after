set cul
set cuc

set foldcolumn=2

nnoremap ` :Switch<cr>

let g:nerdtree_tabs_open_on_gui_startup = 0
let g:NERDTreeQuitOnOpen = 1

inoremap kj <esc>l

" highlight helper
map ,L :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<cr>
command! HI echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<cr>

set modeline

" to use :Run command    - will pipe to quickfix window
command -nargs=+ Run :cexpr system('<args>') | copen

nnoremap <plug>redraw :redraw!<cr>
nmap <leader>rr <plug>redraw

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""" COLORS """""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if ! has('gui_running')
  set background=light
  if 'light' == &background
    source ~/.vimrc.local/vimrc.terminal-colors-light
  else
    source ~/.vimrc.local/vimrc.terminal-colors-dark
  end
end

"autocmd VimEnter,Colorscheme * :hi ...

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

if 0 ==  argc()
  if getcwd() == "/Users/vitaly/my/config/dotvim2"
    "silent OpenTabSession vim2
  endif
endif


let NERDTreeSortOrder=['*']

nmap <leader>i :set paste<cr>o

" highlight column after textwidth
set cc=+1

nunmap <leader>t
nmap <leader>t :Tags<cr>

nmap <localleader>T :tabnew<cr><space>ff

let g:ycm_filepath_completion_use_working_dir = 1

" disable intro message
set shortmess+=I

nmap ,Q :qa<cr>

set virtualedit=block

let g:session_autosave = 'no'
let g:session_autoload = 'no'

nmap <leader>H :Helptags<cr>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_javascript_checkers = ['eslint']

set mouse=nvc

let g:gutentags_ctags_executable_javascript = "~/bin/jstags.sh"

" nvim-only config
if has("nvim")
  nmap <leader>M <c-w><c-s>:te make<cr>
  nmap <leader>Z :term zsh<cr>

  highlight TermCursor ctermfg=red guifg=red
  au BufEnter * if &buftype == 'terminal' | :startinsert | endif
  tnoremap <leader><ESC> <C-\><C-n>

  tnoremap <C-h> <C-\><C-n>:TmuxNavigateLeft<cr>
  tnoremap <C-j> <C-\><C-n>:TmuxNavigateDown<cr>
  tnoremap <C-k> <C-\><C-n>:TmuxNavigateUp<cr>
  tnoremap <C-l> <C-\><C-n>:TmuxNavigateRight<cr>
endif


nnoremap <plug>buffer-next :bn<cr>
nmap <leader>bn <plug>buffer-next

nnoremap <plug>buffer-prev :bp<cr>
nmap <leader>bp <plug>buffer-prev

nnoremap <plug>file-save :w<cr>
nmap <leader>fs <plug>file-save

nnoremap <plug>file-save-all :wa<cr>
nmap <leader>fS <plug>file-save-all

nnoremap <plug>quit-ll :qa<cr>
nmap <leader>qq <plug>quit-ll

" [F]ile [E]dit [D]otfile
nnoremap <plug>file-edit-dotfile :e /Users/vitaly/.vimrc.after<cr>
nmap <leader>fed <plug>file-edit-dotfile

nnoremap <plug>file-open-local-dotvim :e /Users/vitaly/.vimrc.local<cr>
nmap <leader>fel <plug>file-open-local-dotvim




nnoremap <plug>window-h-max    <C-w><bar>
nnoremap <plug>window-v-max    <C-w>_
nnoremap <plug>windows-balance <C-w>=
nnoremap <plug>windows-swap    <C-w>x
nnoremap <plug>window-maximize <C-w>_<C-w><Bar>

nnoremap <plug>window-left     <C-h>
nnoremap <plug>window-down     <C-j>
nnoremap <plug>window-up       <C-k>
nnoremap <plug>window-right    <C-l>


nmap <C-w>z <plug>window-maximize

nmap <leader>w<bar> <plug>window-h-max
nmap <leader>w_     <plug>window-v-max
nmap <leader>w=     <plug>windows-balance
nmap <leader>wx     <plug>windows-swap
nmap <leader>wz     <plug>window-maximize

nmap <leader>wh     <plug>window-left
nmap <leader>wj     <plug>window-down
nmap <leader>wk     <plug>window-up
nmap <leader>wl     <plug>window-right





nnoremap <plug>window-h-split        :split<cr>
nnoremap <plug>window-v-split        :vsplit<cr>
nnoremap <plug>window-quit        :q<cr>
nnoremap <plug>buffer-delete        :bd<cr>
nnoremap <plug>window-only        <C-w>o



" split [W]indow [H]orizontally
nmap <leader>wh        <plug>window-h-split
nmap <leader>w-        <plug>window-h-split

" split [W]indow [V]ertically
nmap <leader>wv        <plug>window-v-split
nmap <leader>w<Bslash> <plug>window-v-split

nmap <leader>wq        <plug>window-quit
nmap <leader>bd        <plug>buffer-delete
nmap <leader>wm        <plug>window-only


nnoremap <leader><space> :


" TODO: this should be in the fuzzy files plugin
nnoremap <Plug>fuzzy-files :Files<CR>

nmap ,, <Plug>fuzzy-files


let g:lmap =  {}
let g:lmap.b = { 'name' : 'Buffer Menu' }
let g:lmap.f = { 'name' : 'File Menu' }
let g:lmap.w = { 'name' : 'Window Menu' }
let g:lmap.x = { 'name' : 'Text Menu' }
let g:lmap.x.d = { 'name' : 'Delete' }

let g:topdict = {}
let g:topdict[' '] = g:lmap

call leaderGuide#register_prefix_descriptions("", "g:topdict")

function! s:my_displayfunc()
  let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '\c<cr>$', '', '')
  let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^<Plug>', '', '')
endfunction
let g:leaderGuide_displayfunc = [function("s:my_displayfunc")]





map <leader>. <plug>leaderguide-global
map <localleader>. <plug>leaderguide-buffer

nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
nnoremap <localleader> :<c-u>LeaderGuide  ','<CR>

vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>
vnoremap <localleader> :<c-u>LeaderGuideVisual  ','<CR>

set timeoutlen=1500     " give 5s to complete mapping sequence


set scrolloff=999 " keep cursor line centered FTW



map <Leader>j <Plug>(easymotion-prefix)
