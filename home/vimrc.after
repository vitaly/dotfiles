set cursorline
set cursorcolumn

set foldcolumn=2

set relativenumber!

nnoremap ` :Switch<cr>

let g:nerdtree_tabs_open_on_gui_startup = 0
let g:NERDTreeQuitOnOpen = 1

inoremap kj <esc>l

" highlight helper

fu! ShowHighlight()
  echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
endfu
map ,L :call ShowHighlight()<cr>
command! HI call ShowHighlight()<cr>

set modeline

" to use :Run command    - will pipe to quickfix window
" command -nargs=+ Run :cexpr system('<args>') | copen

nnoremap <plug>redraw :redraw!<cr>
nmap <leader>rr <plug>redraw

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""" COLORS """""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

if 0 ==  argc()
  if getcwd() == "/Users/vitaly/my/config/dotvim2"
    "silent OpenTabSession vim2
  endif
endif


let NERDTreeSortOrder=['*']

nmap <leader>i :set paste<cr>o

" highlight column after textwidth
set cc=+1

" nunmap <leader>t
" nmap <leader>t :Tags<cr>

noremap <plug>tab(new) :tabnew<cr>
map <plug>tab(new-file)  <plug>tab(new)<plug>fuzzy-file(find)

nmap <leader>tn <plug>tab(new)
nmap <leader>tf <plug>tab(new-file)
let g:ycm_filepath_completion_use_working_dir = 1

" disable intro message
set shortmess+=I

nmap ,Q :qa<cr>

set virtualedit=all

let g:session_autosave = 'no'
let g:session_autoload = 'no'

nmap <leader>H :Helptags<cr>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_javascript_checkers = ['eslint']
let g:gutentags_project_root += [ '.ctags.d', 'tags' ]
" echo g:gutentags_project_root

set mouse=nvc

" :GutentagsToggleTrace
let g:gutentags_generate_on_new = 0
let g:gutentags_generate_on_missing = 0

" nvim-only config
if has("nvim")
  nmap <leader>Z :term zsh<cr>

  highlight TermCursor ctermfg=red guifg=red
  au BufEnter * if &buftype == 'terminal' | :startinsert | endif
  tnoremap <leader><ESC> <C-\><C-n>
endif


nnoremap <plug>buffer(next) :bn<cr>
nmap <leader>bn <plug>buffer(next)

nnoremap <plug>buffer(prev) :bp<cr>
nmap <leader>bp <plug>buffer(prev)

nnoremap <plug>file(save) :w<cr>
nmap <leader>fs <plug>file(save)

nnoremap <plug>file(save-all) :wa<cr>
nmap <leader>fS <plug>file(save-all)

nnoremap <plug>quit(all) :qa<cr>
nmap <leader>qq <plug>quit(all)

" [F]ile [E]dit [D]otfile
nnoremap <plug>(.vimrc.after) :e ~/.vimrc.after<cr>
nmap <leader>fed <plug>(.vimrc.after)

nnoremap <plug>(.vimrc.local) :e ~/.vimrc.local<cr>
nmap <leader>fel <plug>(.vimrc.local)

nnoremap <plug>(.vimrc.plugins) :e ~/.vimrc.plugins<cr>
nmap <leader>fep <plug>(.vimrc.plugins)


nnoremap <plug>window(h-max)    <C-w><bar>
nmap     <leader>w<bar>        <plug>window(h-max)

nnoremap <plug>window(v-max)    <C-w>_
nmap     <leader>w_            <plug>window(v-max)

nnoremap <plug>windows-balance <C-w>=
nmap     <leader>w=            <plug>windows-balance

nnoremap <plug>windows-swap    <C-w>x
nmap     <leader>wx            <plug>windows-swap

nnoremap <plug>window(maximize) <C-w>_<C-w><Bar>
nmap     <leader>wz            <plug>window(maximize)
nmap     <C-w>z                <plug>window(maximize)



nmap <plug>window(up)    :TmuxNavigateUp<CR>
nmap <leader>wk         <plug>window(up)

nmap <plug>window(down)  :TmuxNavigateDown<CR>
nmap <leader>wj         <plug>window(down)

nmap <plug>window(left)  :TmuxNavigateLeft<CR>
nmap <leader>wh         <plug>window(left)

nmap <plug>window(right) :TmuxNavigateRight<CR>
nmap <leader>wl         <plug>window(right)


nmap <plug>window(move-up)    <c-w>K
nmap <leader>wK              <plug>window(move-up)

nmap <plug>window(move-down)  <c-w>J
nmap <leader>wJ              <plug>window(move-down)

nmap <plug>window(move-left)  <c-w>H
nmap <leader>wH              <plug>window(move-left)

nmap <plug>window(move-right) <c-w>L
nmap <leader>wL              <plug>window(move-right)



nnoremap <plug>window(h-split)     :split<cr><c-w>j
nnoremap <plug>window(v-split)     :vsplit<cr><c-w>l
nnoremap <plug>window(delete)      :q<cr>
nnoremap <plug>buffer(delete)      :bd<cr>
nnoremap <plug>window(only)        <C-w>o



" split [W]indow [H]orizontally
nmap <leader>ws        <plug>window(h-split)
nmap <leader>w-        <plug>window(h-split)

" split [W]indow [V]ertically
nmap <leader>wv        <plug>window(v-split)
nmap <leader>w<Bslash> <plug>window(v-split)

nmap <leader>wd        <plug>window(delete)
nmap <leader>wq        <plug>window(delete)
nmap <leader>qw        <plug>window(delete)
nmap <leader>bd        <plug>buffer(delete)
nmap <leader>wm        <plug>window(only)
nmap <leader>wo        <plug>window(only)


nnoremap <leader><space> :


" TODO: this should be in the fuzzy files plugin
nnoremap <Plug>fuzzy-files :Files<CR>

nmap ,, <Plug>fuzzy-files



set timeoutlen=5000     " give 5s to complete mapping sequence


set scrolloff=5 " keep cursor line centered FTW



map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

" inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" inoremap <expr><tab> pumvisible() ? "\<c-y>" : "\<tab>"

" inoremap <expr><c-j> pumvisible() ? "\<down>" : "\<c-j>"
" inoremap <expr><c-k> pumvisible() ? "\<up>" : "\<c-k>"

inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-h> <left>
inoremap <c-l> <right>

cnoremap <c-k> <up>
cnoremap <c-j> <down>


let g:over#command_line#search#enable_move_cursor = 1







"inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))





nmap <leader>bm :messages<cr>






function! s:checkDiffModeEnter()
  if &diff && ! exists('b:diffMode')
    let b:diffMode=1
    doautocmd User DiffModeEnter
  endif
endfunction

function! s:checkDiffModeLeave()
  if ! &diff && exists('b:diffMode')
    unlet b:diffMode
    doautocmd User DiffModeLeave
  endif
endfunction

function! s:onDiffModeEnter()
  echom "diff enter"

  nmap <buffer> <localleader>du :diffupdate<CR>
  nmap <buffer> <localleader>dp :diffput<CR>
  nmap <buffer> <localleader>dg :diffget<CR>
  nmap <buffer> <localleader>n ]c
  nmap <buffer> <localleader>p [c
endfunction

function! s:onDiffModeLeave()
    echom "diff leave"

  nunmap <buffer> <localleader>du
  nunmap <buffer> <localleader>dp
  nunmap <buffer> <localleader>dg
  nunmap <buffer> <localleader>n
  nunmap <buffer> <localleader>p
endfunction

augroup diffbindings
  au!
  au FilterWritePre          * call s:checkDiffModeEnter()
  au FilterWritePre,BufWrite * call s:checkDiffModeLeave()

  au User DiffModeEnter call s:onDiffModeEnter()
  au User DiffModeLeave call s:onDiffModeLeave()
augroup END






""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" ORG MODE """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:org_todo_keywords = [['TODO', 'NOW', 'NEXT', 'WAIT', '|', 'DONE', 'SKIP', 'CANCELED', 'ARCHIVED']]
let g:org_todo_keyword_faces = [
      \ ['WAIT', 'red'],
      \ ['NEXT', 'blue'],
      \ ['SKIP', 'yellow'],
      \ ['CANCELED', 'grey'],
      \]

au FileType org nmap <buffer> <localleader>tn <Plug>OrgTodoForward
au FileType org nmap <buffer> <localleader>tp <Plug>OrgTodoBackward

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let &errorformat ='%-C,%E  [%n] %#%f:%l: %.%#,%C%m,%Z%p^'

set makeprg=make
nmap <leader>M <c-w><c-s>:te make<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -bar -bang IMaps                               call fzf#vim#maps("i", <bang>0)
command! -bar -bang OMaps                               call fzf#vim#maps("o", <bang>0)
command! -bar -bang VMaps                               call fzf#vim#maps("x", <bang>0)
command! -bar -bang CMaps                               call fzf#vim#maps("c", <bang>0)

let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"

let g:SuperTabDefaultCompletionType = "context"

nmap <leader>?  <plug>(fzf-maps-n)
xmap <leader>?  <plug>(fzf-maps-x)
omap <leader>?  <plug>(fzf-maps-o)
imap <c-x><tab> <plug>(fzf-maps-i)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-wiki
hi VimwikiHeader1 ctermfg=1 guifg=red
hi VimwikiHeader2 ctermfg=2 guifg=green
hi VimwikiHeader3 ctermfg=3 guifg=yellow
hi VimwikiHeader4 ctermfg=4 guifg=blue
hi VimwikiHeader5 ctermfg=5 guifg=magenta
hi VimwikiHeader6 ctermfg=6 guifg=cyan


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" NEOPLETE CONFIG """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call deoplete#custom#source('_', 'matchers', ['matcher_full_fuzzy'])

let deoplete#tag#cache_limit_size = 5000000


let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns.q = '[.a-zA-Z_]\k*'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" IndentLine Settings """""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:indentLine_char = 'â”Š'
" let g:indentLine_char = '.'
" let g:indentLine_color_term = 30
" let g:indentLine_bgcolor_term = 10
" exe "IndentLinesToggle"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

source ~/.vimrc.local/vimrc.toggles

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
so ~/.vimrc.local/vimrc.colors
if has('gui_running')
  set guifont=Source\ Code\ Pro\ Light\ for\ Powerline:h8
  " source ~/.vimrc.local/vimrc.gui.light
  source ~/.vimrc.local/vimrc.gui.dark
else
  source ~/.vimrc.local/vimrc.term.light
  " source ~/.vimrc.local/vimrc.term.dark
end

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

so ~/.vimrc.local/vimrc.leaderguide

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap <silent> <localleader>K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> <localleader>gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> ,<F2> :call LanguageClient#textDocument_rename()<CR>
" noremap <localleader>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AirlineTheme light
" AirlineTheme cool
" AirlineTheme one

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
